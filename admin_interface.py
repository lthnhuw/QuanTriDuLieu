import sys
import mysql.connector
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
                             QStackedWidget, QSpacerItem, QSizePolicy, QMessageBox, QTableWidget, QTableWidgetItem,
                             QLineEdit, QDialog, QFormLayout)
from PyQt6.QtWidgets import QHeaderView

from PyQt6.QtGui import QFont, QIcon
from PyQt6.QtCore import Qt, QSize

import subprocess

import datetime

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Qu·∫£n l√≠ th∆∞ vi·ªán")
        self.setFixedSize(1024, 600)

        # T·∫°o widget ch√≠nh v√† layout ch√≠nh
        main_widget = QWidget()
        main_layout = QVBoxLayout()
        main_widget.setLayout(main_layout)
        self.setCentralWidget(main_widget)

        # Thanh ƒëi·ªÅu h∆∞·ªõng ph√≠a tr√™n
        top_nav_widget = QWidget()
        top_nav_layout = QHBoxLayout()
        top_nav_widget.setLayout(top_nav_layout)
        top_nav_widget.setFixedHeight(40)
        top_nav_widget.setStyleSheet("background-color: rgba(255,255,255,0.7); color: white; border-radius: 5px; padding: 2px")

        admin_label = QLabel("Admin")
        admin_label.setFont(QFont("Arial", 12, QFont.Weight.Bold))
        admin_label.setStyleSheet("background-color: rgba(0,0,0,0); color: darkgreen")

        top_nav_layout.addWidget(admin_label)

        # Th√™m kho·∫£ng tr·ªëng ƒë·ªÉ ƒë·∫©y n√∫t ƒëƒÉng xu·∫•t sang b√™n ph·∫£i
        spacer = QSpacerItem(40, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)
        top_nav_layout.addItem(spacer)

        # N√∫t ƒëƒÉng xu·∫•t
        logout_button = QPushButton("ƒêƒÉng xu·∫•t")
        logout_button.setFixedWidth(70)
        logout_button.setFixedHeight(25)
        logout_button.setStyleSheet("background-color: rgba(207, 6, 26,0.8); color: white; padding: 2px; border-radius: 5px")
        top_nav_layout.addWidget(logout_button)

        # K·∫øt n·ªëi n√∫t ƒëƒÉng xu·∫•t v·ªõi h√†m logout
        logout_button.clicked.connect(self.logout)

        # Thanh ƒëi·ªÅu h∆∞·ªõng b√™n tr√°i
        nav_widget = QWidget()
        nav_layout = QVBoxLayout()
        nav_widget.setLayout(nav_layout)
        nav_widget.setFixedWidth(170)
        nav_widget.setStyleSheet("background-color: rgba(255,255,255,0.7); color: white; border-radius: 5px")

        # StackedWidget ƒë·ªÉ ch·ª©a c√°c trang
        self.stacked_widget = QStackedWidget()

        # Th√™m c√°c trang v√†o stacked widget
        self.add_pages_to_stacked_widget()
        self.card_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)


        # Danh s√°ch c√°c m·ª•c ƒëi·ªÅu h∆∞·ªõng
        nav_items = [
            ("Nh√¢n vi√™n","images/nhanvien.png",0),
            ("S√°ch", "images/books.png", 1),
            ("T√°c gi·∫£","images/tacgia.png",2),
            ("Nh√† xu·∫•t b·∫£n","images/nxb.png",3),
            ("ƒê·ªçc gi·∫£","images/reader.png",4),
            ("Th·∫ª th∆∞ vi·ªán", "images/the.png", 5),
            ("M∆∞·ª£n tr·∫£ s√°ch", "images/muontra.png", 6),
            ("Chi ti·∫øt m∆∞·ª£n tr·∫£","images/muontra.png",7),
            ("Th·ªëng k√™", "images/sta.png", 8),
        ]
        
        # T·∫°o c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng v√† k·∫øt n·ªëi s·ª± ki·ªán cho t·ª´ng n√∫t
        for text, icon, index in nav_items:
            button = QPushButton(text)
            button.setIcon(QIcon(icon))  # ƒê·∫∑t bi·ªÉu t∆∞·ª£ng cho n√∫t
            button.setIconSize(QSize(20, 20))  # ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc icon
            button.setStyleSheet("background-color: rgba(33,113,53,0.8); color: white; text-align: left; padding: 10px; border-radius: 5px")
            button.setFont(QFont("Arial", 10))
            button.clicked.connect(lambda checked, idx=index: self.stacked_widget.setCurrentIndex(idx))
            nav_layout.addWidget(button)

        # Th√™m kho·∫£ng tr·ªëng v√†o cu·ªëi ƒë·ªÉ ƒë·∫©y c√°c n√∫t l√™n tr√™n
        nav_layout.addStretch()

        # Layout ch√≠nh
        content_layout = QHBoxLayout()
        content_layout.addWidget(nav_widget)
        content_layout.addWidget(self.stacked_widget)

        main_layout.addWidget(top_nav_widget)
        main_layout.addLayout(content_layout)


    def add_pages_to_stacked_widget(self):
        #Nh√¢n vi√™n
        staff_page = QWidget()
        staff_layout = QVBoxLayout()
        staff_layout.addWidget(QLabel("Nh√¢n vi√™n"))
        staff_page.setLayout(staff_layout)
        self.stacked_widget.addWidget(staff_page)

        # S√°ch 
        book_management_page_1 = QWidget()
        book_management_layout_1 = QVBoxLayout()
        book_management_layout_1.addWidget(QLabel("S√°ch"))
        book_management_page_1.setLayout(book_management_layout_1)
        self.stacked_widget.addWidget(book_management_page_1)


        # T√°c gi·∫£
        author_page = QWidget()
        author_layout = QVBoxLayout()
        author_layout.addWidget(QLabel("T√°c gi·∫£"))
        author_page.setLayout(author_layout)
        self.stacked_widget.addWidget(author_page)

        #Nh√† xu·∫•t b·∫£n
        publisher_page = QWidget()
        publisher_layout = QVBoxLayout()
        publisher_layout.addWidget(QLabel("Nh√† xu·∫•t b·∫£n"))
        publisher_page.setLayout(publisher_layout)
        self.stacked_widget.addWidget(publisher_page)

        # ƒê·ªôc gi·∫£
        reader_page = QWidget()
        reader_layout = QVBoxLayout()
        reader_layout.addWidget(QLabel("ƒê·ªôc gi·∫£"))
        reader_page.setLayout(reader_layout)
        self.stacked_widget.addWidget(reader_page)

        # Th·∫ª th∆∞ vi·ªán
        card_management_page = QWidget()
        card_management_layout = QVBoxLayout()
        card_management_layout.addWidget(QLabel("Th·∫ª th∆∞ vi·ªán"))
        card_management_page.setLayout(card_management_layout)
        self.stacked_widget.addWidget(card_management_page)

        search_layout = QHBoxLayout()
        centered_search_layout = QHBoxLayout()

        search_label = QLabel("T√¨m ki·∫øm th·∫ª th∆∞ vi·ªán:")
        self.search_box = QLineEdit()
        self.search_box.setPlaceholderText("üîçNh·∫≠p s·ªë th·∫ª...")
        self.search_box.textChanged.connect(self.filter_card_table)

        search_layout.addWidget(search_label)
        search_layout.addWidget(self.search_box)

        centered_search_layout.addSpacerItem(QSpacerItem(40, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))
        centered_search_layout.addLayout(search_layout)
        centered_search_layout.addSpacerItem(QSpacerItem(40, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))

        card_management_layout.addLayout(centered_search_layout)

        # T·∫°o b·∫£ng QTableWidget
        self.card_table = QTableWidget()
        self.card_table.setColumnCount(4)  # 4 c·ªôt: S·ªë Th·∫ª, Ng√†y B·∫Øt ƒë·∫ßu, Ng√†y K·∫øt th√∫c, Ghi ch√∫
        self.card_table.setHorizontalHeaderLabels(["S·ªë Th·∫ª", "Ng√†y B·∫Øt ƒë·∫ßu", "Ng√†y K·∫øt th√∫c", "Ghi ch√∫"])

        # L·∫•y d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu v√† th√™m v√†o b·∫£ng
        rows = self.get_card_data_from_db()
        self.card_table.setRowCount(len(rows))
        for row, data in enumerate(rows):
            for column, value in enumerate(data):
                # Chuy·ªÉn ƒë·ªïi datetime.date th√†nh chu·ªói ƒë·ªÉ tr√°nh l·ªói TypeError
                if isinstance(value, datetime.date):
                    value = value.strftime("%Y-%m-%d")  # ƒê·ªãnh d·∫°ng ng√†y theo √Ω mu·ªën, v√≠ d·ª•: YYYY-MM-DD
                self.card_table.setItem(row, column, QTableWidgetItem(str(value)))

        # Th√™m b·∫£ng v√†o layout
        card_management_layout.addWidget(self.card_table)

        # C√°c n√∫t Th√™m, S·ª≠a, X√≥a
        button_layout = QHBoxLayout()
        add_button = QPushButton("Th√™m")
        edit_button = QPushButton("S·ª≠a")
        delete_button = QPushButton("X√≥a")

        add_button.clicked.connect(self.add_card)
        edit_button.clicked.connect(self.edit_card)
        delete_button.clicked.connect(self.delete_card)

        button_layout.addWidget(add_button)
        button_layout.addWidget(edit_button)
        button_layout.addWidget(delete_button)

        # Th√™m c√°c n√∫t v√†o layout
        card_management_layout.addLayout(button_layout)

        # Th√™m trang qu·∫£n l√Ω th·∫ª v√†o stacked widget
        card_management_page.setLayout(card_management_layout)
        self.stacked_widget.addWidget(card_management_page)


        # Qu·∫£n l√Ω m∆∞·ª£n tr·∫£
        borrow_return_page = QWidget()
        borrow_return_layout = QVBoxLayout()
        borrow_return_layout.addWidget(QLabel("Qu·∫£n l√Ω m∆∞·ª£n tr·∫£"))
        borrow_return_page.setLayout(borrow_return_layout)
        self.stacked_widget.addWidget(borrow_return_page)

        # Qu·∫£n l√Ω m∆∞·ª£n tr·∫£
        detail_page = QWidget()
        detail_layout = QVBoxLayout()
        detail_layout.addWidget(QLabel("Qu·∫£n l√Ω m∆∞·ª£n tr·∫£"))
        detail_page.setLayout(detail_layout)
        self.stacked_widget.addWidget(detail_page)

        # Th·ªëng k√™
        statistics_page = QWidget()
        statistics_layout = QVBoxLayout()
        statistics_layout.addWidget(QLabel("Th·ªëng k√™"))
        statistics_page.setLayout(statistics_layout)
        self.stacked_widget.addWidget(statistics_page)

    def filter_card_table(self):
        search_text = self.search_box.text().strip().lower()
        for row in range(self.card_table.rowCount()):
            item = self.card_table.item(row, 0)  # Column 0 is 'S·ªë Th·∫ª'
            self.card_table.setRowHidden(row, search_text not in item.text().lower())

    def add_card(self):
        # M·ªü c·ª≠a s·ªï th√™m th·∫ª m·ªõi
        self.card_dialog = CardDialog(self, "Th√™m th·∫ª")
        self.card_dialog.exec()

    def edit_card(self):
        # M·ªü c·ª≠a s·ªï s·ª≠a th·∫ª
        selected_row = self.card_table.currentRow()
        if selected_row != -1:
            card_data = [self.card_table.item(selected_row, i).text() for i in range(4)]
            self.card_dialog = CardDialog(self, "S·ª≠a th·∫ª", card_data)
            self.card_dialog.exec()
        else:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn th·∫ª ƒë·ªÉ s·ª≠a")

    def delete_card(self):
        # X√≥a th·∫ª ƒë√£ ch·ªçn
        selected_row = self.card_table.currentRow()
        if selected_row != -1:
            reply = QMessageBox.question(self, 'X√°c nh·∫≠n', "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a th·∫ª n√†y?", 
                                         QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No, QMessageBox.StandardButton.No)
            if reply == QMessageBox.StandardButton.Yes:
                card_number = self.card_table.item(selected_row, 0).text()
                self.delete_card_from_db(card_number)
                self.card_table.removeRow(selected_row)
        else:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn th·∫ª ƒë·ªÉ x√≥a")

    def get_card_data_from_db(self):
        db = connect_to_db()
        if db:
            cursor = db.cursor()
            query = "SELECT soThe, ngayBatDau, ngayHetHan, ghiChu FROM the_thu_vien"
            cursor.execute(query)
            rows = cursor.fetchall()
            db.close()
            return rows
        return []

    def add_card_to_db(self, number, start_date, end_date, note):
        # Ki·ªÉm tra xem s·ªë th·∫ª ƒë√£ t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu ch∆∞a
        if self.check_card_exists(number):
            QMessageBox.warning(self, "L·ªói", "S·ªë th·∫ª n√†y ƒë√£ t·ªìn t·∫°i. Vui l√≤ng nh·∫≠p s·ªë th·∫ª kh√°c.")
            return

        db = connect_to_db()  # K·∫øt n·ªëi t·ªõi c∆° s·ªü d·ªØ li·ªáu
        if db:
            cursor = db.cursor()
            query = "INSERT INTO the_thu_vien (soThe, ngayBatDau, ngayHetHan, ghiChu) VALUES (%s, %s, %s, %s)"
            cursor.execute(query, (number, start_date, end_date, note))  # Th·ª±c thi truy v·∫•n
            db.commit()  # X√°c nh·∫≠n thay ƒë·ªïi v√†o c∆° s·ªü d·ªØ li·ªáu
            db.close()  # ƒê√≥ng k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu

            # C·∫≠p nh·∫≠t b·∫£ng giao di·ªán v·ªõi th√¥ng tin th·∫ª m·ªõi
            self.card_table.insertRow(self.card_table.rowCount())  # Th√™m m·ªôt h√†ng m·ªõi v√†o cu·ªëi b·∫£ng
            self.card_table.setItem(self.card_table.rowCount() - 1, 0, QTableWidgetItem(number))
            self.card_table.setItem(self.card_table.rowCount() - 1, 1, QTableWidgetItem(start_date))
            self.card_table.setItem(self.card_table.rowCount() - 1, 2, QTableWidgetItem(end_date))
            self.card_table.setItem(self.card_table.rowCount() - 1, 3, QTableWidgetItem(note))

            self.refresh_and_sort_card_table()

    def check_card_exists(self, number):
        db = connect_to_db()
        if db:
            cursor = db.cursor()
            query = "SELECT COUNT(*) FROM the_thu_vien WHERE soThe = %s"
            cursor.execute(query, (number,))
            result = cursor.fetchone()
            db.close()
            return result[0] > 0  # Tr·∫£ v·ªÅ True n·∫øu s·ªë th·∫ª ƒë√£ t·ªìn t·∫°i
        return False



    def update_card_in_db(self, number, start_date, end_date, note, original_number):
        # Ki·ªÉm tra xem s·ªë th·∫ª m·ªõi c√≥ t·ªìn t·∫°i kh√¥ng (v√† kh√¥ng ph·∫£i l√† s·ªë th·∫ª c≈© ƒëang s·ª≠a)
        if number != original_number and self.check_card_exists(number):
            QMessageBox.warning(self, "L·ªói", "S·ªë th·∫ª n√†y ƒë√£ t·ªìn t·∫°i. Vui l√≤ng nh·∫≠p s·ªë th·∫ª kh√°c.")
            return

        db = connect_to_db()
        if db:
            cursor = db.cursor()
            query = """UPDATE the_thu_vien 
                        SET soThe = %s, ngayBatDau = %s, ngayHetHan = %s, ghiChu = %s 
                        WHERE soThe = %s"""
            cursor.execute(query, (number, start_date, end_date, note, original_number))  # C·∫≠p nh·∫≠t th·∫ª
            db.commit()  # L∆∞u thay ƒë·ªïi v√†o c∆° s·ªü d·ªØ li·ªáu
            db.close()  # ƒê√≥ng k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu

            # L√†m m·ªõi b·∫£ng v√† s·∫Øp x·∫øp l·∫°i theo 'S·ªë Th·∫ª'
            self.refresh_and_sort_card_table()


    def refresh_and_sort_card_table(self):
        rows = self.get_card_data_from_db()  # L·∫•y l·∫°i to√†n b·ªô d·ªØ li·ªáu th·∫ª t·ª´ c∆° s·ªü d·ªØ li·ªáu
        rows.sort(key=lambda x: x[0])  # S·∫Øp x·∫øp c√°c d√≤ng theo s·ªë th·∫ª 
        # X√≥a to√†n b·ªô d·ªØ li·ªáu trong b·∫£ng
        self.card_table.setRowCount(0)

        # Th√™m c√°c d√≤ng ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp v√†o b·∫£ng
        for row, data in enumerate(rows):
            self.card_table.insertRow(row)  # Th√™m d√≤ng m·ªõi v√†o b·∫£ng
            for column, value in enumerate(data):
                if isinstance(value, datetime.date):
                    value = value.strftime("%Y-%m-%d")  
                self.card_table.setItem(row, column, QTableWidgetItem(str(value)))  

    def delete_card_from_db(self, number):
        db = connect_to_db()
        if db:
            cursor = db.cursor()
            query = "DELETE FROM the_thu_vien WHERE soThe = %s"
            cursor.execute(query, (number,))
            db.commit()
            db.close()

    def logout(self):
       # X√°c nh·∫≠n ƒëƒÉng xu·∫•t
        reply = QMessageBox.question(self, 'X√°c nh·∫≠n', "B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t?", 
                                     QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No, QMessageBox.StandardButton.No)
        if reply == QMessageBox.StandardButton.Yes:
            try:
                subprocess.Popen(["python", "login.py"])  
                self.close()  
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Kh√¥ng th·ªÉ m·ªü giao di·ªán ƒëƒÉng nh·∫≠p: {e}")


def connect_to_db():
    try:
        db = mysql.connector.connect(
            host='localhost',  
            user='root',  
            password='07042003',  
            database='quanlithuvien'  
        )
        return db
    except mysql.connector.Error as err:
        QMessageBox.critical(None, "L·ªói k·∫øt n·ªëi", f"Kh√¥ng th·ªÉ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu: {err}")
        return None


class CardDialog(QDialog):
    def __init__(self, parent, title, card_data=None):
        super().__init__(parent)
        self.setWindowTitle(title)
        self.setFixedSize(300, 200)

        # Layout v√† form
        layout = QFormLayout(self)

        self.soThe = QLineEdit(self)
        self.ngayBatDau = QLineEdit(self)
        self.ngayHetHan = QLineEdit(self)
        self.ghiChu = QLineEdit(self)

        layout.addRow("S·ªë th·∫ª:", self.soThe)
        layout.addRow("Ng√†y b·∫Øt ƒë·∫ßu:", self.ngayBatDau)
        layout.addRow("Ng√†y h·∫øt h·∫°n:", self.ngayHetHan)
        layout.addRow("Ghi ch√∫:", self.ghiChu)

        # N·∫øu c√≥ d·ªØ li·ªáu th·∫ª, ƒëi·ªÅn v√†o c√°c tr∆∞·ªùng
        if card_data:
            self.soThe.setText(card_data[0])
            self.ngayBatDau.setText(card_data[1])
            self.ngayHetHan.setText(card_data[2])
            self.ghiChu.setText(card_data[3])

        # Th√™m n√∫t x√°c nh·∫≠n
        button_layout = QHBoxLayout()
        confirm_button = QPushButton("X√°c nh·∫≠n", self)
        confirm_button.clicked.connect(self.accept)

        cancel_button = QPushButton("H·ªßy", self)
        cancel_button.clicked.connect(self.reject)

        button_layout.addWidget(confirm_button)
        button_layout.addWidget(cancel_button)

        layout.addRow(button_layout)

    def accept(self):
        # L·∫•y d·ªØ li·ªáu t·ª´ c√°c √¥ nh·∫≠p li·ªáu
        number = self.soThe.text()  
        start_date = self.ngayBatDau.text()  
        end_date = self.ngayHetHan.text()  
        note = self.ghiChu.text() 

        # Ki·ªÉm tra xem l√† th√™m th·∫ª m·ªõi hay s·ª≠a th·∫ª c≈©
        if self.windowTitle() == "Th√™m th·∫ª":
            self.parent().add_card_to_db(number, start_date, end_date, note)  # G·ªçi h√†m th√™m th·∫ª m·ªõi
        elif self.windowTitle() == "S·ª≠a th·∫ª":
            # L·∫•y s·ªë th·∫ª g·ªëc ƒë·ªÉ x√°c ƒë·ªãnh h√†ng c·∫ßn c·∫≠p nh·∫≠t trong c∆° s·ªü d·ªØ li·ªáu
            original_number = self.parent().card_table.item(self.parent().card_table.currentRow(), 0).text()
            # G·ªçi h√†m c·∫≠p nh·∫≠t th·∫ª v·ªõi s·ªë th·∫ª g·ªëc v√† c√°c th√¥ng tin ƒë√£ ch·ªânh s·ª≠a
            self.parent().update_card_in_db(number, start_date, end_date, note, original_number)

            # C·∫≠p nh·∫≠t b·∫£ng giao di·ªán
            self.parent().card_table.setItem(self.parent().card_table.currentRow(), 0, QTableWidgetItem(number))
            self.parent().card_table.setItem(self.parent().card_table.currentRow(), 1, QTableWidgetItem(start_date))
            self.parent().card_table.setItem(self.parent().card_table.currentRow(), 2, QTableWidgetItem(end_date))
            self.parent().card_table.setItem(self.parent().card_table.currentRow(), 3, QTableWidgetItem(note))

        super().accept()  # ƒê√≥ng h·ªôp tho·∫°i sau khi ho√†n th√†nh


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
